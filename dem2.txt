IDENTIFICATION DIVISION.
PROGRAM-ID. ITEM-INQUIRY.

ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
    SELECT ITEM-FILE ASSIGN TO "ITEMFILE"
        ORGANIZATION IS INDEXED
        ACCESS MODE IS SEQUENTIAL
        RECORD KEY IS ITEM-CODE
        FILE STATUS IS WS-FILE-STATUS.

DATA DIVISION.
FILE SECTION.
FD  ITEM-FILE.
01  ITEM-RECORD.
    05  ITEM-CODE       PIC 9(07).  * Primary Key
    05  ITEM-NAME       PIC X(12).
    05  ITEM-QTY        PIC 9(05).
    05  ITEM-PRICE      PIC 9(05)V9(02).

WORKING-STORAGE SECTION.
01  WS-ITEM-CODE       PIC 9(07).
01  WS-KEY             PIC X.
01  WS-FILE-STATUS     PIC XX.  * File status for VSAM operations
01  EOF                PIC X VALUE 'N'.
01  WS-RECORD-COUNT    PIC 9(5) VALUE 0.
01  WS-RECORD-LIMIT    PIC 9(5) VALUE 10.
01  WS-START-POSITION  PIC 9(5) VALUE 1.

PROCEDURE DIVISION.
MAIN-PROCEDURE.
    DISPLAY "ITEM INQUIRY PROGRAM".
    PERFORM INITIALIZE-FILE.

    PERFORM UNTIL WS-KEY = '3'
        PERFORM DISPLAY-MENU
        EVALUATE WS-KEY
            WHEN '5'
                PERFORM DISPLAY-FIRST-10
            WHEN '6'
                PERFORM DISPLAY-LAST-10
            WHEN '7'
                PERFORM DISPLAY-PREVIOUS-10
            WHEN '8'
                PERFORM DISPLAY-NEXT-10
            WHEN OTHER
                DISPLAY "INVALID FUNCTION KEY. PLEASE TRY AGAIN."
        END-EVALUATE
    END-PERFORM.

    PERFORM CLOSE-FILE.
    DISPLAY "RETURNING TO MAIN MENU...".
    STOP RUN.

INITIALIZE-FILE.
    OPEN I-O ITEM-FILE.
    IF WS-FILE-STATUS NOT = "00"
        DISPLAY "ERROR OPENING FILE. STATUS: " WS-FILE-STATUS
        STOP RUN
    END-IF.
    MOVE 1 TO WS-START-POSITION.
    MOVE 'N' TO EOF.

CLOSE-FILE.
    CLOSE ITEM-FILE.

DISPLAY-MENU.
    DISPLAY "PF3 = EXIT  PF5 = FIRST  PF6 = LAST  PF7 = PREV  PF8 = NEXT".
    DISPLAY "ENTER FUNCTION KEY: ".
    ACCEPT WS-KEY.

DISPLAY-FIRST-10.
    MOVE 1 TO WS-START-POSITION.
    PERFORM DISPLAY-RECORDS.

DISPLAY-LAST-10.
    PERFORM CALCULATE-LAST-START.
    PERFORM DISPLAY-RECORDS.

DISPLAY-PREVIOUS-10.
    SUBTRACT WS-RECORD-LIMIT FROM WS-START-POSITION.
    IF WS-START-POSITION < 1
        MOVE 1 TO WS-START-POSITION
    END-IF.
    PERFORM DISPLAY-RECORDS.

DISPLAY-NEXT-10.
    ADD WS-RECORD-LIMIT TO WS-START-POSITION.
    PERFORM DISPLAY-RECORDS.

DISPLAY-RECORDS.
    MOVE 0 TO WS-RECORD-COUNT.
    DISPLAY "RECORDS: ".
    PERFORM UNTIL WS-RECORD-COUNT >= WS-RECORD-LIMIT OR EOF = 'Y'
        IF WS-RECORD-COUNT = 0
            START ITEM-FILE KEY >= WS-START-POSITION
                INVALID KEY
                    MOVE 'Y' TO EOF
            END-START
        END-IF
        READ ITEM-FILE NEXT
            AT END
                MOVE 'Y' TO EOF
            NOT AT END
                DISPLAY "ITEM CODE : " ITEM-CODE
                DISPLAY "ITEM NAME : " ITEM-NAME
                DISPLAY "ITEM QTY  : " ITEM-QTY
                DISPLAY "ITEM PRICE: " ITEM-PRICE
                ADD 1 TO WS-RECORD-COUNT
        END-READ
    END-PERFORM.

CALCULATE-LAST-START.
    MOVE 0 TO WS-RECORD-COUNT.
    PERFORM UNTIL EOF = 'Y'
        READ ITEM-FILE NEXT
            AT END
                MOVE 'Y' TO EOF
            NOT AT END
                ADD 1 TO WS-RECORD-COUNT
        END-READ.
    MOVE 'N' TO EOF.
    IF WS-RECORD-COUNT > WS-RECORD-LIMIT
        SUBTRACT WS-RECORD-LIMIT FROM WS-RECORD-COUNT
        MOVE WS-RECORD-COUNT TO WS-START-POSITION
    ELSE
        MOVE 1 TO WS-START-POSITION
    END-IF.


   ############################# CICS representation

    ITEMMAP  DFHMSD TYPE=MAPSET,MODE=INOUT,LANG=COBOL
ITEMSCR  DFHMDI SIZE=(24,80),LINE=1,COLUMN=1,JUSTIFY=LEFT
         DFHMDF POS=(1,2),LENGTH=20,ATTRB=(ASKIP),INITIAL="DATE: "
         DFHMDF POS=(1,8),LENGTH=11,ATTRB=(UNPROT),FIELD=DATE-FIELD
         DFHMDF POS=(1,25),LENGTH=20,ATTRB=(ASKIP),INITIAL="TIME: "
         DFHMDF POS=(1,31),LENGTH=8,ATTRB=(UNPROT),FIELD=TIME-FIELD
         DFHMDF POS=(2,2),LENGTH=30,ATTRB=(ASKIP),INITIAL="ABC GROUP OF INDIA"
         DFHMDF POS=(3,2),LENGTH=30,ATTRB=(ASKIP),INITIAL="ITEM INQUIRY PROGRAM"
         DFHMDF POS=(5,2),LENGTH=6,ATTRB=(ASKIP),INITIAL="ITEM#"
         DFHMDF POS=(5,10),LENGTH=12,ATTRB=(ASKIP),INITIAL="ITEM NAME"
         DFHMDF POS=(5,25),LENGTH=8,ATTRB=(ASKIP),INITIAL="ITEM QTY"
         DFHMDF POS=(6,2),LENGTH=7,ATTRB=(UNPROT),FIELD=ITEM-CODE1
         DFHMDF POS=(6,10),LENGTH=12,ATTRB=(UNPROT),FIELD=ITEM-NAME1
         DFHMDF POS=(6,25),LENGTH=8,ATTRB=(UNPROT),FIELD=ITEM-QTY1
         DFHMDF POS=(22,2),LENGTH=40,ATTRB=(ASKIP),INITIAL="PF3 = EXIT PF5 = FIRST PF6 = LAST PF7 = PREV PF8 = NEXT"
         DFHMDI END
ITEMMAP  DFHMSD TYPE=FINAL

###############cobol-cics program

IDENTIFICATION DIVISION.
PROGRAM-ID. ITEM-INQUIRY.

ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
    SELECT ITEM-FILE ASSIGN TO "ITEMFILE"
        ORGANIZATION IS INDEXED
        ACCESS MODE IS SEQUENTIAL
        RECORD KEY IS ITEM-CODE
        FILE STATUS IS WS-FILE-STATUS.

DATA DIVISION.
FILE SECTION.
FD  ITEM-FILE.
01  ITEM-RECORD.
    05  ITEM-CODE       PIC 9(07).  * Primary Key
    05  ITEM-NAME       PIC X(12).
    05  ITEM-QTY        PIC 9(05).
    05  ITEM-PRICE      PIC 9(05)V9(02).

WORKING-STORAGE SECTION.
01  WS-ITEM-CODE       PIC 9(07).
01  WS-KEY             PIC X.
01  WS-FILE-STATUS     PIC XX.  * File status for VSAM operations
01  EOF                PIC X VALUE 'N'.
01  WS-RECORD-COUNT    PIC 9(5) VALUE 0.
01  WS-RECORD-LIMIT    PIC 9(5) VALUE 10.
01  WS-START-POSITION  PIC 9(5) VALUE 1.
01  DATE-FIELD         PIC X(11).
01  TIME-FIELD         PIC X(8).
01  ITEM-CODE-FIELDS   PIC 9(07) OCCURS 10 TIMES.
01  ITEM-NAME-FIELDS   PIC X(12) OCCURS 10 TIMES.
01  ITEM-QTY-FIELDS    PIC 9(05) OCCURS 10 TIMES.
01  ITEM-PRICE-FIELDS  PIC 9(05)V9(02) OCCURS 10 TIMES.

PROCEDURE DIVISION.
MAIN-PROCEDURE.
    EXEC CICS ASSIGN DATE(DATE-FIELD) TIME(TIME-FIELD) END-EXEC.
    PERFORM INITIALIZE-FILE.

    PERFORM UNTIL WS-KEY = '3'
        PERFORM DISPLAY-MENU
        EXEC CICS RECEIVE MAP('ITEMSCR') MAPSET('ITEMMAP') END-EXEC
        EVALUATE WS-KEY
            WHEN '5'
                PERFORM DISPLAY-FIRST-10
            WHEN '6'
                PERFORM DISPLAY-LAST-10
            WHEN '7'
                PERFORM DISPLAY-PREVIOUS-10
            WHEN '8'
                PERFORM DISPLAY-NEXT-10
            WHEN OTHER
                EXEC CICS SEND TEXT("INVALID FUNCTION KEY. TRY AGAIN.") END-EXEC
        END-EVALUATE
    END-PERFORM.

    PERFORM CLOSE-FILE.
    EXEC CICS SEND TEXT("RETURNING TO MAIN MENU...") END-EXEC.
    EXEC CICS RETURN END-EXEC.

INITIALIZE-FILE.
    OPEN I-O ITEM-FILE.
    IF WS-FILE-STATUS NOT = "00"
        EXEC CICS SEND TEXT("ERROR OPENING FILE. STATUS: " WS-FILE-STATUS) END-EXEC
        EXEC CICS RETURN END-EXEC
    END-IF.
    MOVE 1 TO WS-START-POSITION.
    MOVE 'N' TO EOF.

CLOSE-FILE.
    CLOSE ITEM-FILE.

DISPLAY-MENU.
    EXEC CICS SEND MAP('ITEMSCR') MAPSET('ITEMMAP') ERASE END-EXEC.

DISPLAY-FIRST-10.
    MOVE 1 TO WS-START-POSITION.
    PERFORM DISPLAY-RECORDS.

DISPLAY-LAST-10.
    PERFORM CALCULATE-LAST-START.
    PERFORM DISPLAY-RECORDS.

DISPLAY-PREVIOUS-10.
    SUBTRACT WS-RECORD-LIMIT FROM WS-START-POSITION.
    IF WS-START-POSITION < 1
        MOVE 1 TO WS-START-POSITION
    END-IF.
    PERFORM DISPLAY-RECORDS.

DISPLAY-NEXT-10.
    ADD WS-RECORD-LIMIT TO WS-START-POSITION.
    PERFORM DISPLAY-RECORDS.

DISPLAY-RECORDS.
    MOVE 0 TO WS-RECORD-COUNT.
    PERFORM UNTIL WS-RECORD-COUNT >= WS-RECORD-LIMIT OR EOF = 'Y'
        IF WS-RECORD-COUNT = 0
            START ITEM-FILE KEY >= WS-START-POSITION
                INVALID KEY
                    MOVE 'Y' TO EOF
            END-START
        END-IF
        READ ITEM-FILE NEXT
            AT END
                MOVE 'Y' TO EOF
            NOT AT END
                MOVE ITEM-CODE TO ITEM-CODE-FIELDS(WS-RECORD-COUNT + 1)
                MOVE ITEM-NAME TO ITEM-NAME-FIELDS(WS-RECORD-COUNT + 1)
                MOVE ITEM-QTY TO ITEM-QTY-FIELDS(WS-RECORD-COUNT + 1)
                MOVE ITEM-PRICE TO ITEM-PRICE-FIELDS(WS-RECORD-COUNT + 1)
                ADD 1 TO WS-RECORD-COUNT
        END-READ
    END-PERFORM.

CALCULATE-LAST-START.
    MOVE 0 TO WS-RECORD-COUNT.
    PERFORM UNTIL EOF = 'Y'
        READ ITEM-FILE NEXT
            AT END
                MOVE 'Y' TO EOF
            NOT AT END
                ADD 1 TO WS-RECORD-COUNT
        END-READ.
    MOVE 'N' TO EOF.
    IF WS-RECORD-COUNT > WS-RECORD-LIMIT
        SUBTRACT WS-RECORD-LIMIT FROM WS-RECORD-COUNT
        MOVE WS-RECORD-COUNT TO WS-START-POSITION
    ELSE
        MOVE 1 TO WS-START-POSITION
    END-IF.


    Create ksds file having KSDS = Item Master File
Field Name Data Type Remarks
Item Code 9(07) Primary Key
Item Name X(12)
Item Qty 9(05)
Item Price 9(05)V9(02)

//DEFINEKS JOB (ACCT),'DEFINE KSDS',CLASS=A,MSGCLASS=A
//STEP1    EXEC PGM=IDCAMS
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  *
  DEFINE CLUSTER (NAME(ITEM.MASTER.FILE) -
                  INDEXED -
                  KEYS(7 0) -                /* Key length and offset */
                  RECORDSIZE(50 100) -       /* Average and maximum record size */
                  TRACKS(1 1) -              /* Space allocation */
                  FREESPACE(10 10) -         /* Free space for inserts */
                  VOLUMES(VOL001) -          /* Volume name */
                  SHR(3)) -
          DATA (NAME(ITEM.MASTER.FILE.DATA)) -
          INDEX (NAME(ITEM.MASTER.FILE.INDEX))
/*
//
###loading some data to the ksds File
//LOADKSDS JOB (ACCT),'LOAD KSDS',CLASS=A,MSGCLASS=A
//STEP1    EXEC PGM=IDCAMS
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  *
  REPRO INFILE(INPUTFILE) -
        OUTFILE(ITEM.MASTER.FILE)
/*
//INPUTFILE DD *
0000001ITEM1      00010 00025.50
0000002ITEM2      00020 00050.75
0000003ITEM3      00015 00030.00
0000004ITEM4      00050 00100.25
0000005ITEM5      00005 00010.00
0000006ITEM6      00030 00075.00
0000007ITEM7      00025 00060.50
0000008ITEM8      00040 00120.00
0000009ITEM9      00035 00090.75
0000010ITEM10     00045 00150.00
/*
//