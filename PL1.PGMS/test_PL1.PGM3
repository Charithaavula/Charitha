/* Test cases for CUSTOMER_DETAILS_UPDATE program */

/* Test Case 1: Search for an existing customer record */
TEST_SEARCH_EXISTING: PROCEDURE;
    DECLARE WS_CUST_NO CHAR(7) INIT('1234567');
    DECLARE WS_FOUND_FLAG CHAR(1);

    PUT SKIP LIST('TEST CASE 1: SEARCH FOR EXISTING CUSTOMER');
    LOCATE FILE(CUSTOMER_FILE) KEY(WS_CUST_NO);
    READ FILE(CUSTOMER_FILE) INTO(CUSTOMER_RECORD);

    IF FILESTATUS(CUSTOMER_FILE) = '00' THEN DO;
        PUT SKIP LIST('TEST PASSED: CUSTOMER RECORD FOUND.');
    END;
    ELSE PUT SKIP LIST('TEST FAILED: CUSTOMER RECORD NOT FOUND.');
END TEST_SEARCH_EXISTING;

/* Test Case 2: Search for a non-existing customer record */
TEST_SEARCH_NON_EXISTING: PROCEDURE;
    DECLARE WS_CUST_NO CHAR(7) INIT('9999999');
    DECLARE WS_FOUND_FLAG CHAR(1);

    PUT SKIP LIST('TEST CASE 2: SEARCH FOR NON-EXISTING CUSTOMER');
    LOCATE FILE(CUSTOMER_FILE) KEY(WS_CUST_NO);
    READ FILE(CUSTOMER_FILE) INTO(CUSTOMER_RECORD);

    IF FILESTATUS(CUSTOMER_FILE) /= '00' THEN DO;
        PUT SKIP LIST('TEST PASSED: CUSTOMER RECORD NOT FOUND.');
    END;
    ELSE PUT SKIP LIST('TEST FAILED: CUSTOMER RECORD FOUND.');
END TEST_SEARCH_NON_EXISTING;

/* Test Case 3: Add a new customer record */
TEST_ADD_RECORD: PROCEDURE;
    DECLARE 1 NEW_CUSTOMER_RECORD,
                    2 CUST_NO          CHAR(7) INIT('7654321'),
                    2 CUST_NAME        CHAR(20) INIT('Test User'),
                    2 CUST_ADDRESS     CHAR(30) INIT('123 Test Street'),
                    2 CUST_REGION      CHAR(3) INIT('MUM'),
                    2 CUST_CONTACT_NO  CHAR(10) INIT('9876543210'),
                    2 CUST_EMAIL       CHAR(40) INIT('testuser@example.com');

    PUT SKIP LIST('TEST CASE 3: ADD NEW CUSTOMER RECORD');
    LOCATE FILE(CUSTOMER_FILE) KEY(NEW_CUSTOMER_RECORD.CUST_NO);
    READ FILE(CUSTOMER_FILE) INTO(CUSTOMER_RECORD);

    IF FILESTATUS(CUSTOMER_FILE) /= '00' THEN DO;
        WRITE FILE(CUSTOMER_FILE) FROM(NEW_CUSTOMER_RECORD);
        PUT SKIP LIST('TEST PASSED: NEW CUSTOMER RECORD ADDED.');
    END;
    ELSE PUT SKIP LIST('TEST FAILED: CUSTOMER RECORD ALREADY EXISTS.');
END TEST_ADD_RECORD;

/* Test Case 4: Update an existing customer record */
TEST_UPDATE_RECORD: PROCEDURE;
    DECLARE WS_CUST_NO CHAR(7) INIT('1234567');
    DECLARE 1 UPDATED_CUSTOMER_RECORD,
                    2 CUST_NO          CHAR(7) INIT('1234567'),
                    2 CUST_NAME        CHAR(20) INIT('Updated User'),
                    2 CUST_ADDRESS     CHAR(30) INIT('456 Updated Street'),
                    2 CUST_REGION      CHAR(3) INIT('DEL'),
                    2 CUST_CONTACT_NO  CHAR(10) INIT('1234567890'),
                    2 CUST_EMAIL       CHAR(40) INIT('updateduser@example.com');

    PUT SKIP LIST('TEST CASE 4: UPDATE EXISTING CUSTOMER RECORD');
    LOCATE FILE(CUSTOMER_FILE) KEY(WS_CUST_NO);
    READ FILE(CUSTOMER_FILE) INTO(CUSTOMER_RECORD);

    IF FILESTATUS(CUSTOMER_FILE) = '00' THEN DO;
        REWRITE FILE(CUSTOMER_FILE) FROM(UPDATED_CUSTOMER_RECORD);
        PUT SKIP LIST('TEST PASSED: CUSTOMER RECORD UPDATED.');
    END;
    ELSE PUT SKIP LIST('TEST FAILED: CUSTOMER RECORD NOT FOUND.');
END TEST_UPDATE_RECORD;

/* Test Case 5: Delete an existing customer record */
TEST_DELETE_RECORD: PROCEDURE;
    DECLARE WS_CUST_NO CHAR(7) INIT('1234567');

    PUT SKIP LIST('TEST CASE 5: DELETE EXISTING CUSTOMER RECORD');
    LOCATE FILE(CUSTOMER_FILE) KEY(WS_CUST_NO);
    READ FILE(CUSTOMER_FILE) INTO(CUSTOMER_RECORD);

    IF FILESTATUS(CUSTOMER_FILE) = '00' THEN DO;
        DELETE FILE(CUSTOMER_FILE);
        PUT SKIP LIST('TEST PASSED: CUSTOMER RECORD DELETED.');
    END;
    ELSE PUT SKIP LIST('TEST FAILED: CUSTOMER RECORD NOT FOUND.');
END TEST_DELETE_RECORD;

/* Main test procedure */
RUN_TESTS: PROCEDURE OPTIONS(MAIN);
    PUT SKIP LIST('RUNNING TEST CASES FOR CUSTOMER_DETAILS_UPDATE PROGRAM');
    CALL TEST_SEARCH_EXISTING;
    CALL TEST_SEARCH_NON_EXISTING;
    CALL TEST_ADD_RECORD;
    CALL TEST_UPDATE_RECORD;
    CALL TEST_DELETE_RECORD;
    PUT SKIP LIST('ALL TEST CASES EXECUTED.');
END RUN_TESTS;